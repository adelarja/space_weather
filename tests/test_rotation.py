# This file is part of the
# 	Solarwindpy Project(https://github.com/adelarja/space_weather).

# Copyright (c) 2021, Adriana Gulisano, Adel Arja, Ricardo Pafundigit,
# Violeta Bazzano.
# All rights reserved.

# License: BSD 3-Clause License
# 	Full Text: https://github.com/adelarja/space_weather/blob/main/LICENSE

from datetime import datetime

import numpy as np

import pytest

from solarwindpy.mininum_variance_formulation import (
    KindMv,
    RotatedWind,
    get_main_versor,
)
from solarwindpy.wind import MagneticField


X_INPUT = np.array(
    [
        2.43728540e00,
        2.38411988e00,
        2.32536654e00,
        2.26108405e00,
        2.19134191e00,
        2.11622037e00,
        2.03581026e00,
        1.95021290e00,
        1.85953994e00,
        1.76391312e00,
        1.66346415e00,
        1.55833443e00,
        1.44867482e00,
        1.33464538e00,
        1.21641511e00,
        1.09416161e00,
        9.68070814e-01,
        8.38336603e-01,
        7.05160493e-01,
        5.68751254e-01,
        4.29324528e-01,
        2.87102438e-01,
        1.42313175e-01,
        -4.80942362e-03,
        -1.54026306e-01,
        -3.05093656e-01,
        -4.57763343e-01,
        -6.11783392e-01,
        -7.66898452e-01,
        -9.22850282e-01,
        -1.07937823e00,
        -1.23621975e00,
        -1.39311085e00,
        -1.54978665e00,
        -1.70598185e00,
        -1.86143123e00,
        -2.01587020e00,
        -2.16903526e00,
        -2.32066450e00,
        -2.47049815e00,
        -2.61827902e00,
        -2.76375304e00,
        -2.90666971e00,
        -3.04678262e00,
        -3.18384987e00,
        -3.31763460e00,
        -3.44790537e00,
        -3.57443670e00,
        -3.69700940e00,
        -3.81541107e00,
        -3.92943648e00,
        -4.03888797e00,
        -4.14357580e00,
        -4.24331858e00,
        -4.33794357e00,
        -4.42728702e00,
        -4.51119448e00,
        -4.58952113e00,
        -4.66213203e00,
        -4.72890237e00,
        -4.78971774e00,
        -4.84447432e00,
        -4.89307911e00,
        -4.93545008e00,
        -4.97151632e00,
        -5.00121821e00,
        -5.02450750e00,
        -5.04134742e00,
        -5.05171272e00,
        -5.05558976e00,
        -5.05297647e00,
        -5.04388243e00,
        -5.02832876e00,
        -5.00634813e00,
        -4.97798469e00,
        -4.94329395e00,
        -4.90234270e00,
        -4.85520884e00,
        -4.80198125e00,
        -4.74275961e00,
        -4.67765420e00,
        -4.60678565e00,
        -4.53028477e00,
        -4.44829219e00,
        -4.36095820e00,
        -4.26844235e00,
        -4.17091318e00,
        -4.06854792e00,
        -3.96153206e00,
        -3.85005907e00,
        -3.73432995e00,
        -3.61455290e00,
        -3.49094287e00,
        -3.36372114e00,
        -3.23311490e00,
        -3.09935682e00,
        -2.96268457e00,
        -2.82334037e00,
        -2.68157053e00,
        -2.53762495e00,
    ]
)

Y_INPUT = np.array(
    [
        -3.41694646,
        -3.67457759,
        -3.93044511,
        -4.18411293,
        -4.43514739,
        -4.68311804,
        -4.92759847,
        -5.16816715,
        -5.4044082,
        -5.63591221,
        -5.86227706,
        -6.08310862,
        -6.29802159,
        -6.50664018,
        -6.70859887,
        -6.90354313,
        -7.09113005,
        -7.27102907,
        -7.44292259,
        -7.60650658,
        -7.76149118,
        -7.90760127,
        -8.044577,
        -8.1721743,
        -8.29016536,
        -8.39833903,
        -8.49650133,
        -8.58447572,
        -8.66210353,
        -8.72924422,
        -8.78577567,
        -8.83159445,
        -8.86661598,
        -8.89077472,
        -8.9040243,
        -8.90633761,
        -8.89770687,
        -8.87814361,
        -8.8476787,
        -8.80636228,
        -8.75426362,
        -8.69147106,
        -8.61809179,
        -8.53425167,
        -8.44009498,
        -8.33578415,
        -8.22149943,
        -8.09743857,
        -7.96381641,
        -7.8208645,
        -7.66883061,
        -7.50797832,
        -7.33858643,
        -7.16094848,
        -6.97537218,
        -6.78217879,
        -6.58170252,
        -6.3742899,
        -6.16029907,
        -5.94009915,
        -5.71406949,
        -5.48259894,
        -5.24608514,
        -5.0049337,
        -4.7595575,
        -4.51037581,
        -4.25781358,
        -4.00230056,
        -3.74427049,
        -3.48416031,
        -3.2224093,
        -2.95945823,
        -2.69574857,
        -2.43172162,
        -2.16781766,
        -1.90447516,
        -1.64212994,
        -1.38121432,
        -1.12215635,
        -0.86537899,
        -0.61129931,
        -0.36032773,
        -0.11286725,
        0.13068729,
        0.36994995,
        0.6045444,
        0.83410457,
        1.05827539,
        1.27671337,
        1.48908724,
        1.69507856,
        1.89438226,
        2.08670722,
        2.27177672,
        2.44932898,
        2.61911759,
        2.78091189,
        2.93449744,
        3.0796763,
        3.21626735,
    ]
)

Z_INPUT = np.array(
    [
        -3.14652193e00,
        -3.07788554e00,
        -3.00203530e00,
        -2.91904696e00,
        -2.82901025e00,
        -2.73202875e00,
        -2.62821974e00,
        -2.51771403e00,
        -2.40065574e00,
        -2.27720205e00,
        -2.14752299e00,
        -2.01180110e00,
        -1.87023115e00,
        -1.72301978e00,
        -1.57038515e00,
        -1.41255657e00,
        -1.24977405e00,
        -1.08228790e00,
        -9.10358282e-01,
        -7.34254711e-01,
        -5.54255582e-01,
        -3.70647653e-01,
        -1.83725518e-01,
        6.20893919e-03,
        1.98847107e-01,
        3.93874216e-01,
        5.90969935e-01,
        7.89808963e-01,
        9.90061645e-01,
        1.19139459e00,
        1.39347131e00,
        1.59595283e00,
        1.79849838e00,
        2.00076596e00,
        2.20241309e00,
        2.40309739e00,
        2.60247724e00,
        2.80021248e00,
        2.99596499e00,
        3.18939939e00,
        3.38018368e00,
        3.56798983e00,
        3.75249446e00,
        3.93337945e00,
        4.11033251e00,
        4.28304785e00,
        4.45122670e00,
        4.61457793e00,
        4.77281861e00,
        4.92567451e00,
        5.07288069e00,
        5.21418194e00,
        5.34933336e00,
        5.47810074e00,
        5.60026107e00,
        5.71560296e00,
        5.82392703e00,
        5.92504630e00,
        6.01878657e00,
        6.10498670e00,
        6.18349901e00,
        6.25418946e00,
        6.31693797e00,
        6.37163865e00,
        6.41819997e00,
        6.45654495e00,
        6.48661129e00,
        6.50835153e00,
        6.52173308e00,
        6.52673831e00,
        6.52336458e00,
        6.51162421e00,
        6.49154451e00,
        6.46316764e00,
        6.42655060e00,
        6.38176505e00,
        6.32889721e00,
        6.26804766e00,
        6.19933114e00,
        6.12287633e00,
        6.03882560e00,
        5.94733471e00,
        5.84857248e00,
        5.74272053e00,
        5.62997283e00,
        5.51053537e00,
        5.38462576e00,
        5.25247277e00,
        5.11431590e00,
        4.97040488e00,
        4.82099924e00,
        4.66636773e00,
        4.50678787e00,
        4.34254531e00,
        4.17393339e00,
        4.00125245e00,
        3.82480933e00,
        3.64491675e00,
        3.46189267e00,
        3.27605973e00,
    ]
)

EXPECTED_X_OUTPUT = np.array(
    [
        0.00000000e00,
        -2.22044605e-16,
        -2.22044605e-16,
        2.22044605e-16,
        0.00000000e00,
        -2.22044605e-16,
        0.00000000e00,
        0.00000000e00,
        -2.22044605e-16,
        0.00000000e00,
        -4.44089210e-16,
        2.22044605e-16,
        2.22044605e-16,
        0.00000000e00,
        -1.11022302e-16,
        -2.22044605e-16,
        -2.22044605e-16,
        -2.22044605e-16,
        -3.33066907e-16,
        -2.77555756e-16,
        -2.77555756e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -2.81892565e-16,
        -2.08166817e-16,
        -1.11022302e-16,
        -1.66533454e-16,
        -3.88578059e-16,
        -1.11022302e-16,
        -3.33066907e-16,
        -5.55111512e-16,
        -4.44089210e-16,
        -6.66133815e-16,
        -2.22044605e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -6.66133815e-16,
        -2.22044605e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        0.00000000e00,
        -8.88178420e-16,
        -8.88178420e-16,
        0.00000000e00,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        0.00000000e00,
        0.00000000e00,
        -4.44089210e-16,
        -4.44089210e-16,
        4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -8.88178420e-16,
        -8.88178420e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        4.44089210e-16,
        0.00000000e00,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        0.00000000e00,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        0.00000000e00,
        -4.44089210e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        -8.88178420e-16,
        -4.44089210e-16,
        -4.44089210e-16,
        0.00000000e00,
        0.00000000e00,
        -8.88178420e-16,
        0.00000000e00,
        0.00000000e00,
        0.00000000e00,
        4.44089210e-16,
        0.00000000e00,
        -4.44089210e-16,
    ]
)

EXPECTED_Y_OUTPUT = np.array(
    [
        -5.24401596,
        -5.33970655,
        -5.42721362,
        -5.5063356,
        -5.57688614,
        -5.63869447,
        -5.69160584,
        -5.73548178,
        -5.7702005,
        -5.79565708,
        -5.81176377,
        -5.81845016,
        -5.8156634,
        -5.80336828,
        -5.7815474,
        -5.75020117,
        -5.70934791,
        -5.65902381,
        -5.59928288,
        -5.53019692,
        -5.45185538,
        -5.36436522,
        -5.26785074,
        -5.16245335,
        -5.04833136,
        -4.92565964,
        -4.79462935,
        -4.65544758,
        -4.50833696,
        -4.35353526,
        -4.19129496,
        -4.02188273,
        -3.845579,
        -3.66267738,
        -3.47348411,
        -3.27831753,
        -3.0775074,
        -2.87139434,
        -2.66032914,
        -2.4446721,
        -2.22479235,
        -2.00106715,
        -1.77388115,
        -1.54362564,
        -1.31069783,
        -1.07550009,
        -0.83843914,
        -0.59992529,
        -0.36037165,
        -0.12019334,
        0.12019334,
        0.36037165,
        0.59992529,
        0.83843914,
        1.07550009,
        1.31069783,
        1.54362564,
        1.77388115,
        2.00106715,
        2.22479235,
        2.4446721,
        2.66032914,
        2.87139434,
        3.0775074,
        3.27831753,
        3.47348411,
        3.66267738,
        3.845579,
        4.02188273,
        4.19129496,
        4.35353526,
        4.50833696,
        4.65544758,
        4.79462935,
        4.92565964,
        5.04833136,
        5.16245335,
        5.26785074,
        5.36436522,
        5.45185538,
        5.53019692,
        5.59928288,
        5.65902381,
        5.70934791,
        5.75020117,
        5.7815474,
        5.80336828,
        5.8156634,
        5.81845016,
        5.81176377,
        5.79565708,
        5.7702005,
        5.73548178,
        5.69160584,
        5.63869447,
        5.57688614,
        5.5063356,
        5.42721362,
        5.33970655,
        5.24401596,
    ]
)

EXPECTED_Z_OUTPUT = np.array(
    [
        0.1295378,
        0.38400714,
        0.64288145,
        0.90576237,
        1.1722422,
        1.44190464,
        1.71432557,
        1.98907383,
        2.265712,
        2.54379719,
        2.82288189,
        3.1025148,
        3.38224163,
        3.66160599,
        3.94015022,
        4.21741626,
        4.49294648,
        4.76628458,
        5.03697642,
        5.30457089,
        5.56862075,
        5.82868348,
        6.08432214,
        6.33510615,
        6.58061216,
        6.82042482,
        7.05413758,
        7.28135347,
        7.50168586,
        7.71475917,
        7.92020962,
        8.11768591,
        8.30684991,
        8.48737725,
        8.65895804,
        8.82129736,
        8.9741159,
        9.11715045,
        9.25015445,
        9.3728984,
        9.48517038,
        9.5867764,
        9.67754077,
        9.75730648,
        9.82593547,
        9.88330892,
        9.92932743,
        9.96391129,
        9.98700055,
        9.9985552,
        9.9985552,
        9.98700055,
        9.96391129,
        9.92932743,
        9.88330892,
        9.82593547,
        9.75730648,
        9.67754077,
        9.5867764,
        9.48517038,
        9.3728984,
        9.25015445,
        9.11715045,
        8.9741159,
        8.82129736,
        8.65895804,
        8.48737725,
        8.30684991,
        8.11768591,
        7.92020962,
        7.71475917,
        7.50168586,
        7.28135347,
        7.05413758,
        6.82042482,
        6.58061216,
        6.33510615,
        6.08432214,
        5.82868348,
        5.56862075,
        5.30457089,
        5.03697642,
        4.76628458,
        4.49294648,
        4.21741626,
        3.94015022,
        3.66160599,
        3.38224163,
        3.1025148,
        2.82288189,
        2.54379719,
        2.265712,
        1.98907383,
        1.71432557,
        1.44190464,
        1.1722422,
        0.90576237,
        0.64288145,
        0.38400714,
        0.1295378,
    ]
)

FAKE_DATE = datetime(2021, 1, 1)


def check_element_by_element(element_a, element_b):
    return [round(a, 4) == round(b, 4) for a, b in zip(element_a, element_b)]


def test_rotation():
    magnetic_fields = []
    for x, y, z in zip(X_INPUT, Y_INPUT, Z_INPUT):
        magnetic_fields.append(MagneticField(FAKE_DATE, x, y, z))

    rotated_wind = RotatedWind.get_rotated_wind(magnetic_fields)

    assert all(check_element_by_element(EXPECTED_X_OUTPUT, rotated_wind.bgse0))
    assert all(check_element_by_element(EXPECTED_Y_OUTPUT, rotated_wind.bgse1))
    assert all(check_element_by_element(EXPECTED_Z_OUTPUT, rotated_wind.bgse2))


def test_rotation_using_angles():
    magnetic_fields = []
    for x, y, z in zip(X_INPUT, Y_INPUT, Z_INPUT):
        magnetic_fields.append(MagneticField(FAKE_DATE, x, y, z))

    rotated_wind = RotatedWind.get_rotated_wind_using_angles(magnetic_fields)

    assert all(check_element_by_element(EXPECTED_X_OUTPUT, rotated_wind.bgse0))
    assert all(check_element_by_element(EXPECTED_Y_OUTPUT, rotated_wind.bgse1))
    assert all(check_element_by_element(EXPECTED_Z_OUTPUT, rotated_wind.bgse2))


def test_rotation_using_transposed():
    magnetic_fields = []
    for x, y, z in zip(X_INPUT, Y_INPUT, Z_INPUT):
        magnetic_fields.append(MagneticField(FAKE_DATE, x, y, z))

    rotated_wind = RotatedWind.get_rotated_wind_using_transposed_matrix(
        magnetic_fields
    )

    assert all(check_element_by_element(EXPECTED_X_OUTPUT, rotated_wind.bgse0))
    assert all(check_element_by_element(EXPECTED_Y_OUTPUT, rotated_wind.bgse1))
    assert all(check_element_by_element(EXPECTED_Z_OUTPUT, rotated_wind.bgse2))


@pytest.mark.parametrize(
    "kind_mv, xversor, zversor, expected_versor",
    [
        (KindMv.X_VERSOR, "XVERSOR", "ZVERSOR", "XVERSOR"),
        (KindMv.Z_VERSOR, "XVERSOR", "ZVERSOR", "ZVERSOR"),
    ],
)
def test_get_main_versor(kind_mv, xversor, zversor, expected_versor):
    assert get_main_versor(kind_mv, xversor, zversor) == expected_versor


def test_get_main_versor_exception():
    kind_mv = 21
    with pytest.raises(ValueError):
        get_main_versor(kind_mv, "FAKE_VALUE_1", "FAKE_VALUE_2")
